{"version":3,"sources":["components/ItemGood/ItemGood.jsx","App.jsx","index.jsx"],"names":["ItemGood","good","goodsMod","goodsCh","setGoodsCh","id","name","bool","className","cn","type","onClick","itemHasTrueId","find","i","a","map","e","setNewValues","goods","App","itemM","indexOf","useState","selectedName","item","ReactDOM","render","document","getElementById"],"mappings":"4OAGaA,EAAW,SAAC,GAKlB,IAJLC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,QACAC,EACI,EADJA,WAEQC,EAAmBJ,EAAnBI,GAAIC,EAAeL,EAAfK,KAAMC,EAASN,EAATM,KAgClB,OACE,qBACE,UAAQ,OACRC,UAAWC,IAAG,CACZ,+BAAgCF,IAHpC,UAME,6BACE,wBACE,oBAAYA,EAAO,eAAiB,aACpCG,KAAK,SACLF,UAAWC,IAAG,SAAU,CACtB,UAAWF,IAEbI,QApBe,YACR,UADoC,EAARD,MAxB3C,WACE,IAAME,EACJT,EAAQU,MAAK,SAAAC,GAAC,OAAIA,EAAEP,QAClBJ,EAAQU,MAAK,SAAAC,GAAC,OAAIA,EAAEP,QAAMF,GAC1B,EAEJ,GAAIO,IAAkBP,EAAI,CACxB,IAAMU,EAAIb,EAASc,KAAI,SAAAC,GAAC,kCACnBA,GADmB,IAChBV,MAAM,OAECQ,EAAEF,MAAK,SAAAI,GAAC,OAAIA,EAAEZ,KAAOA,KAE7BE,MAAO,EAEdH,EAAWW,QACN,GAAIH,IAAkBP,EAAI,CAC/B,IAAMU,EAAIb,EAASc,KAAI,SAAAC,GAAC,kCACnBA,GADmB,IAChBV,MAAM,OAGdH,EAAWW,IAMXG,IAYE,mBAQMX,EAAO,IAAM,SAIrB,oBAAI,UAAQ,YAAYC,UAAU,eAAlC,SACGF,QCxDIa,G,MAAQ,CACnB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,WAGWC,EAAM,WACjB,IAAMlB,EAAWiB,EAAMH,KAAI,SAAAK,GAAK,MAAK,CACnChB,GAAIc,EAAMG,QAAQD,GAAS,EAAGf,KAAMe,EAAOd,MAAM,MAGvCL,EAASW,MAAK,SAAAC,GAAC,MAAe,QAAXA,EAAER,QAE7BC,MAAO,EAEX,MAA8BgB,mBAASrB,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMoB,EACJrB,EAAQU,MAAK,SAAAC,GAAC,OAAIA,EAAEP,QAClBJ,EAAQU,MAAK,SAAAC,GAAC,OAAIA,EAAEP,QAAMD,KAAO,GAUrC,OACE,uBAAME,UAAU,oBAAhB,UACE,oBAAIA,UAAWC,IAAG,sCAAuC,CACvD,YAAae,IADf,+BAOA,qBAAIhB,UAAWC,IAAG,sCAAuC,CACvD,aAAce,IADhB,oBAIMA,EAJN,gBAME,wBACE,UAAQ,cACRd,KAAK,SACLF,UAAU,cACVG,QA3BW,WACjB,IAAMI,EAAIb,EAASc,KAAI,SAAAC,GAAC,kCACnBA,GADmB,IAChBV,MAAM,OAGdH,EAAWW,SA0BT,uBAAOP,UAAU,QAAjB,SACE,gCACGL,EAAQa,KAAI,SAAAS,GAAI,OACf,cAAC,EAAD,CAEExB,KAAMwB,EACNvB,SAAUA,EACVC,QAASA,EACTC,WAAYA,GAJPqB,EAAKpB,eClExBqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bc59f1e0.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nexport const ItemGood = ({\n  good,\n  goodsMod,\n  goodsCh,\n  setGoodsCh,\n}) => {\n  const { id, name, bool } = good;\n\n  function setNewValues() {\n    const itemHasTrueId\n    = goodsCh.find(i => i.bool)\n      ? goodsCh.find(i => i.bool).id\n      : 0;\n\n    if (itemHasTrueId !== id) {\n      const a = goodsMod.map(e => ({\n        ...e, bool: false,\n      }));\n      const chosen = a.find(e => e.id === id);\n\n      chosen.bool = true;\n\n      setGoodsCh(a);\n    } else if (itemHasTrueId === id) {\n      const a = goodsMod.map(e => ({\n        ...e, bool: false,\n      }));\n\n      setGoodsCh(a);\n    }\n  }\n\n  const btnClickAction = function clickAct({ type }) {\n    if (type === 'click') {\n      setNewValues();\n    }\n  };\n\n  return (\n    <tr\n      data-cy=\"Good\"\n      className={cn({\n        'has-background-success-light': bool,\n      })}\n    >\n      <td>\n        <button\n          data-cy={`${bool ? 'RemoveButton' : 'AddButton'}`}\n          type=\"button\"\n          className={cn('button', {\n            'is-info': bool,\n          })}\n          onClick={btnClickAction}\n        >\n          {`${bool ? '-' : '+'}`}\n        </button>\n      </td>\n\n      <td data-cy=\"GoodTitle\" className=\"is-vcentered\">\n        {name}\n      </td>\n    </tr>\n  );\n};\n","import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport { ItemGood } from './components/ItemGood';\nimport './App.scss';\n\nexport const goods = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App = () => {\n  const goodsMod = goods.map(itemM => ({\n    id: goods.indexOf(itemM) + 1, name: itemM, bool: false,\n  }));\n\n  const Jam = goodsMod.find(i => i.name === 'Jam');\n\n  Jam.bool = true;\n\n  const [goodsCh, setGoodsCh] = useState(goodsMod);\n\n  const selectedName\n  = goodsCh.find(i => i.bool)\n    ? goodsCh.find(i => i.bool).name : '';\n\n  const setNoGoods = function setNo() {\n    const a = goodsMod.map(e => ({\n      ...e, bool: false,\n    }));\n\n    setGoodsCh(a);\n  };\n\n  return (\n    <main className=\"section container\">\n      <h1 className={cn('title is-flex is-align-items-center', {\n        'is-hidden': selectedName,\n      })}\n      >\n        No goods selected\n      </h1>\n\n      <h1 className={cn('title is-flex is-align-items-center', {\n        'is-hidden': !selectedName,\n      })}\n      >\n        {`${selectedName} is selected`}\n\n        <button\n          data-cy=\"ClearButton\"\n          type=\"button\"\n          className=\"delete ml-3\"\n          onClick={setNoGoods}\n        />\n      </h1>\n\n      <table className=\"table\">\n        <tbody>\n          {goodsCh.map(item => (\n            <ItemGood\n              key={item.id}\n              good={item}\n              goodsMod={goodsMod}\n              goodsCh={goodsCh}\n              setGoodsCh={setGoodsCh}\n            />\n          ))}\n        </tbody>\n      </table>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}